syntax = "proto3";



// =============== Types ================

// Type of expressions are represented as strings in protobuf format.
// A type might be, e.g., "int", "bool" or "location", where the latter is a problem-specific type.

// Built-in types are namespaced with the `up:` prefix:
//  - "up:bool"
//  - "up:integer"
//  - "up:real"
//  - "up:time"
//
// Any other string (e.g. "location") refers to a symbolic type and must have been declared in the problem definition.

// We can also consider restrictions to int/reals with specific syntax (e.g. "up:integer[0,100]").


// ================== Expressions ====================


// As in s-expression, an Expression is either an atom or list representing the application of some parameters to a function/fluent.
message Expression {
    // If non-empty, the expression is a single atom.
    // For instance `3`, `+`, `kitchen`, `at-robot`, ...
    Atom atom = 1;
    // If the `atom` field is empty, then the expression is a list of sub-expressions,
    // typically representing the application of some arguments to a function or fluent.
    // For instance `(+ 1 3)`, (at-robot l1)`, `(>= (battery_level) 20)`
    repeated Expression list = 2;

    // Type of the expression. For instance "int", "location", ...
    string type = 3;
    // Kind of the expression, specifying the content of the expression.
    // This is intended to facilitate parsing of the expression.
    ExpressionKind kind = 4;
}

// The kind of an expression, which gives information related to its structure.
enum ExpressionKind {
    // Default value, should not be used. Drop it if we are sure to never need it.
    UNKNOWN = 0;
    // Constant atom. For instance `3` or `kitchen` (where `kitchen` is an object defined in the problem)
    CONSTANT = 1;
    // Atom symbol representing a parameter from an outer scope. For instance `from` that would appear inside a `(move from to - location)` action.
    PARAMETER = 2;
    // Atom symbol representing a variable from an outer scope.
    // This is typically used to represent the variables that are existentially or universally qualified in expressions.
    VARIABLE = 7;
    // Atom symbol representing a fluent of the problem. For instance `at-robot`.
    FLUENT_SYMBOL = 3;
    // Atom representing a function. For instance `+`, `=`, `and`, ...
    FUNCTION_SYMBOL = 4;
    // List. Application of some parameters to a fluent symbol. For instance `(at-robot l1)` or `(battery-charged)`
    // The first element of the list must be a FLUENT_SYMBOL
    STATE_VARIABLE = 5;
    // List. The expression is the application of some parameters to a function. For instance `(+ 1 3)`.
    // The first element of the list must be a FUNCTION_SYMBOL
    FUNCTION_APPLICATION = 6;

    // Atom symbol. Unique identifier of a task or action in the current scope.
    CONTAINER_ID = 8;
}


message Atom {
    oneof content {
        string symbol = 1;
        int64 int = 2;
        Real real = 3;
        bool boolean = 4;
    }
}

// Representation of a constant real number, as the fraction `(numerator / denominator)`.
// A real should be in its canonical form (with smallest possible denominator).
// Notably, if this number is an integer, then it is guaranteed that `denominator == 1`.
message Real {
    int64 numerator = 1;
    int64 denominator = 2;
}



// ============= Domains ====================


// Declares the existence of a symbolic type.
message TypeDeclaration {
    // Name of the type that is declared.
    string type_name = 1;
    // Optional. If the string is non-empty, this is the parent type of `type_name`.
    // If set, the parent type must have been previously declared (i.e. should appear earlier in the problem's type declarations.
    // feature: HIERARCHICAL_TYPING
    string parent_type = 2;
}

// Parameter of a fluent or of an action
message Parameter {
    // Name of the parameter.
    string name = 1;
    // Type of the parameter.
    string type = 2;
}

// A state-dependent variable.
message Fluent {
    string name = 1;
    // Return type of the fluent.
    string value_type = 2;
    // Typed and named parameters of the fluent.
    repeated Parameter parameters = 3;

    // If non-empty, then any state variable using this fluent that is not explicitly given a value in the initial state
    // will be assumed to have this default value.
    // This allows mimicking the closed world assumption by setting a "false" default value to predicates.
    Expression default_value = 4;
}


// Declares an object with the given name and type.
message ObjectDeclaration {
    // Name of the object.
    string name = 1;
    // Type of the object.
    // The type must have been previously declared in the problem definition.
    string type = 2;
}





// ========= Actions ========



// An effect expression is of the form `FLUENT OP VALUE`.
// We explicitly restrict the different types of effects by setting the allowed operators.
message EffectExpression {
    enum EffectKind {
        // The `fluent` is set to the corresponding `value`
        ASSIGN = 0;

        // The `fluent` is increased by the amount `value`
        // features: INCREASE_EFFECTS
        INCREASE = 1;

        // The `fluent` is decreased by the amount `value`
        // features: DECREASE_EFFECTS
        DECREASE = 2;
    }
    EffectKind kind = 1;

    // Expression that must be of the STATE_VARIABLE kind.
    Expression fluent = 2;

    Expression value = 3;

    // Optional. If the effect is conditional, then the following field must be set.
    // In this case, the `effect` will only be applied if the `condition`` holds.
    // If the effect is unconditional, the effect is set to the constant 'true' value.
    // features: CONDITIONAL_EFFECT
    Expression condition = 4;

    // The variables that quantify this effect
    repeated Expression forall = 5;
}

// Representation of an effect that allows qualifying the effect expression, e.g., to make it a conditional effect.
message Effect {
    // Required. The actual effect that should take place.
    EffectExpression effect = 1;

    // Optional. If the effect is within a durative action, the following must be set and will specify when the effect takes place.
    // features: DURATIVE_ACTIONS
    Timing occurrence_time = 2;
}


message Condition {
    Expression cond = 1;

    // Optional. Must be set for durative actions where it specifies the temporal interval
    // over which when the condition should hold.
    // features: DURATIVE_ACTIONS
    TimeInterval span = 2;
}

// Unified action representation that represents any kind of actions.
message Action {
    // Action name. E.g. "move"
    string name = 1;

    // Typed and named parameters of the action.
    repeated Parameter parameters = 2;

    // If set, the action is durative. Otherwise it is instantaneous.
    // features: DURATIVE_ACTIONS
    Duration duration = 3;

    // Conjunction of conditions that must hold for the action to be applicable.
    repeated Condition conditions = 4;

    // Conjunction of effects as a result of applying this action.
    repeated Effect effects = 5;
}


// Symbolic reference to an absolute time.
// It might represent:
// - the time of the initial/final state, or
// - the start/end of the containing action, or
// - the start/end of one of the subtask in the context of a method or of a task network.
message Timepoint {
    enum TimepointKind {
      // Global start of the planning problem. This is context independent and represents the time at which the initial state holds.
      GLOBAL_START = 0;
      // Global end of the planning problem. This is context independent and represents the time at which the final state holds.
      GLOBAL_END = 1;
      // Start of the container (typically the action or method) in which this symbol occurs
      START = 2;
      // End of the container (typically the action or method) in which this symbol occurs
      END = 3;
    }
    TimepointKind kind = 1;

    // If non-empty, identifies the container of which we are extracting the start/end timepoint.
    // In the context of a task-network or of a method, this could be the `id` of one of the subtasks.
    // feature: hierarchies
    string container_id = 2;
}

// Represents a time (`timepoint` + `delay`), that is a time defined relatively to a particular `timepoint`.
// Note that an absolute time can be defined by setting the `delay` relative to the `GLOBAL_START`` which is the reference time.
message Timing {
    Timepoint timepoint = 1;
    Real delay = 2;
}


// An interval `[lower, upper]` where `lower` and `upper` are arbitrary expressions.
// The `is_left_open` and `is_right_open` fields indicate whether the interval is
// opened on left and right side respectively.
message Interval {
    bool is_left_open = 1;
    Expression lower = 2;
    bool is_right_open = 3;
    Expression upper = 4;
}

// A contiguous slice of time represented as an interval `[lower, upper]` where `lower` and `upper` are time references.
// The `is_left_open` and `is_right_open` fields indicate whether the interval is
// opened on left and right side respectively.
message TimeInterval {
    bool is_left_open = 1;
    Timing lower = 2;
    bool is_right_open = 3;
    Timing upper = 4;
}



message Duration {
    /// The duration of the action can be freely chosen within the indicated bounds
    Interval controllable_in_bounds = 1;
}


// ============== Hierarchies ====================

// Declares an abstract task together with its expected parameters.
//
// Example: goto(robot: Robot, destination: Location)
message AbstractTaskDeclaration {

    // Example: "goto"
    string name = 1;

    // Example:
    //  - robot: Robot
    //  - destination: Location
    repeated Parameter parameters = 2;
}

// Representation of an abstract or primitive task that should be achieved,
// required either in the initial task network or as a subtask of a method.
//
// Example:  task of sending a `robot` to the KITCHEN
//   - t1: goto(robot, KITCHEN)
message Task {
    // Identifier of the task, required to be unique in the method/task-network where the task appears.
    // The `id` is notably used to refer to the start/end of the task.
    //
    // Example: t1
    string id = 1;

    // Name of the task that should be achieved. It might either
    //  - an abstract task if the name is the one of a task declared in the problem
    //  - a primitive task if the name is the one of an action declared in the problem
    //
    // Example:
    //  - "goto" (abstract task)
    //  - "move" (action / primitive task)
    string task_name = 2;

    // Example: (for a "goto" task)
    //  - robot    (a parameter from an outer scope)
    //  - KITCHEN  (a constant symbol in the problem)
    repeated Expression parameters = 3;
}

// A method describes one possible way of achieving a task.
//
// Example: A method that make a "move" action and recursively calls itself until reaching the destination.
message Method {
    // A name that uniquely identify the method.
    // This is mostly used for user facing output or plan validation.
    //
    // Example: "m-recursive-goto"
    string name = 1;

    // Example: [robot: Robot, source: Location, intermediate: Location, destination: Location]
    repeated Parameter parameters = 2;

    // The task that is achieved by the method.
    // A subset of the parameters of the method will typically be used to
    // define the task that is achieved.
    //
    // Example: goto(robot, destination)
    Task achieved_task = 3;

    // A set of subtasks that should be achieved to carry out the method.
    // Note that the order of subtasks is irrelevant and that any ordering constraint should be
    // specified in the `constraints` field.
    //
    // Example:
    //  - t1: (move robot source intermediate)
    //  - t2: goto(robot destination)
    repeated Task subtasks = 4;

    // Constraints enable the definition of ordering constraints as well as constraints
    // on the allowed instantiation of the method's parameters.
    //
    // Example:
    //  - end(t1) < start(t2)
    //  - source != intermediate
    repeated Expression constraints = 5;

    // Conjunction of conditions that must hold for the method to be applicable.
    // As for the conditions of actions, these can be temporally qualified to refer to intermediate timepoints.
    // In addition to the start/end of the method, the temporal qualification might refer to the start/end of
    // one of the subtasks using its identifier.
    //
    // Example:
    //  - [start] loc(robot) == source
    //  - [end(t1)] loc(robot) == intermediate
    //  - [end] loc(robot) == destination
    repeated Condition conditions = 6;
}

// A task network defines a set of subtasks and associated constraints.
// It is intended to be used to define the initial task network of the hierarchical problem.
//
// Example: an arbitrary robot should go to the KITCHEN before time 100
message TaskNetwork {
    // robot: Location
    repeated Parameter variables = 1;
    // t1: goto(robot, KITCHEN)
    repeated Task subtasks = 2;
    // end(t1) <= 100
    repeated Expression constraints = 3;
}

// Represents the hierarchical part of a problem.
// features: hierarchical
message Hierarchy {
    repeated AbstractTaskDeclaration abstract_tasks = 1;
    repeated Method methods = 2;
    TaskNetwork initial_task_network = 3;
}

// ============= Scheduling =======================

// Activity in a scheduling problem.
message Activity {
    // Name of the activity that must uniquely identify it.
    string name = 1;

    // Typed and named parameters of the activity.
    repeated Parameter parameters = 2;

    // Duration of the activity
    Duration duration = 3;

    // Conjunction of conditions that must hold if the activity is present.
    repeated Condition conditions = 4;

    // Conjunction of effects that this activity produces.
    repeated Effect effects = 5;

    // Conjunction of static constraints that must hold if the activity is present.
    repeated Expression constraints = 6;
}

// Extension of `Problem` for scheduling
message SchedulingExtension {
    // All potential activities of the scheduling problem.
    repeated Activity activities = 1;

    // All variables in the base problem
    repeated Parameter variables = 2;

    // All constraints in the base problem.
    repeated Expression constraints = 5;
}

message Schedule {
    // Name of the activities that appear in the solution
    repeated string activities = 1;

    // Assignment of all variables and activity parameters and timepoints
    // that appear in the solution.
    map<string, Atom> variable_assignments = 2;
}



// ============== Problem =========================


// A Goal is currently an expression that must hold either:
// - in the final state,
// - over a specific temporal interval (under the `timed_goals` features)
message Goal {
    // Goal expression that must hold in the final state.
    Expression goal = 1;

    // Optional. If specified the goal should hold over the specified temporal interval (instead of on the final state).
    // features: TIMED_GOALS
    TimeInterval timing = 2;
}

// Represents an effect that will occur sometime beyond the initial state. (similar to timed initial literals)
message TimedEffect {
    // Required. An effect expression that will take place sometime in the future (i.e. not at the intial state) as specified by the temporal qualifiation.
    EffectExpression effect = 1;
    // Required. Temporal qualification denoting when the timed fact will occur.
    Timing occurrence_time = 2;
}

// An assignment of a value to a fluent, as it appears in the initial state definition.
message Assignment {
    // State variable that is assigned the `value`.
    // It should be an expression of the STATE_VARIABLE kind for which all parameters are of the CONSTANT kind.
    Expression fluent = 1;
    // An expression of the CONSTANT kind, denoting the value take by the state variable.
    Expression value = 2;
}

// Represents a goal associated with a weight, used to define oversubscription planning.
message GoalWithWeight {
    // Goal expression
    Expression goal = 1;
    // The weight
    Real weight = 2;
}

// Represents a timed goal associated with a weight, used to define temporal oversubscription planning.
message TimedGoalWithWeight {
    // Goal expression
    Expression goal = 1;
    // The time interval
    TimeInterval timing = 2;
    // The weight
    Real weight = 3;
}

message Metric {
    enum MetricKind {
      // Minimize the action costs expressed in the `action_costs` field
      MINIMIZE_ACTION_COSTS = 0;

      // Minimize the length of the resulting sequential plan
      MINIMIZE_SEQUENTIAL_PLAN_LENGTH = 1;

      // Minimize the makespan in case of temporal planning
      // features: durative_actions
      MINIMIZE_MAKESPAN = 2;

      // Minimize the value of the expression defined in the `expression` field
      MINIMIZE_EXPRESSION_ON_FINAL_STATE = 3;

      // Maximize the value of the expression defined in the `expression` field
      MAXIMIZE_EXPRESSION_ON_FINAL_STATE = 4;

      // Maximize the weighted number of goals reached
      OVERSUBSCRIPTION = 5;

      // Maximize the weighted number of timed goals reached
      TEMPORAL_OVERSUBSCRIPTION = 6;
    }
    MetricKind kind = 1;


    // Expression to minimize/maximize in the final state.
    // Empty, if the `kind` is not {MIN/MAX}IMIZE_EXPRESSION_ON_FINAL_STATE
    Expression expression = 2;

    // If `kind == MINIMIZE_ACTION_COSTS``, then each action is associated to a cost expression.
    //
    // TODO: Document what is allowed in the expression. See issue #134
    // In particular, for this metric to be useful in many practical problems, the cost expression
    // should allow referring to the action parameters (and possibly the current state at the action start/end).
    // This is very awkward to do in this setting where the expression is detached from its scope.
    map<string, Expression> action_costs = 3;
    Expression default_action_cost = 4;

    // List of goals used to define the oversubscription planning problem.
    // Empty, if the `kind` is not OVERSUBSCRIPTION
    repeated GoalWithWeight goals = 5;

    // List of timed goals used to define the temporal oversubscription planning problem.
    // Empty, if the `kind` is not TEMPORAL_OVERSUBSCRIPTION
    repeated TimedGoalWithWeight timed_goals = 6;
}

message Problem {
    string domain_name = 1;
    string problem_name = 2;
    repeated TypeDeclaration types = 3;
    repeated Fluent fluents = 4;
    repeated ObjectDeclaration objects = 5;

    // List of actions in the domain.
    // features: ACTION_BASED
    repeated Action actions = 6;

    // Explicit assignments to state variables in the initial state.
    // State variables not assigned there and will take the default value of their fluent, if any.
    repeated Assignment initial_state = 7;

    // Facts and effects that are expected to occur strictly later than the initial state.
    // features: TIMED_EFFECTS
    repeated TimedEffect timed_effects = 8;

    // Goals of the planning problem.
    repeated Goal goals = 9;

    // all features of the problem
    repeated Feature features = 10;

    // The plan quality metrics
    repeated Metric metrics = 11;

    // If the problem is hierarchical, defines the tasks and methods as well as the initial task network.
    // features: HIERARCHICAL
    Hierarchy hierarchy = 12;

    // Scheduling-specific extension of the problem.
    // features: SCHEDULING
    SchedulingExtension scheduling_extension = 17;

    // Trajectory constraints of the planning problem.
    repeated Expression trajectory_constraints = 13;

    // Flag defining if the time is discrete
    bool discrete_time = 14;

    // Flag defining if the self_overlapping is allowed
    bool self_overlapping = 15;

    // Optional. epsilon required by the problem
    Real epsilon = 16;
}

// Features of the problem.
// Features are essential in that not supporting a feature `X` should allow disregarding any field tagged with `features: [X]`.
enum Feature {
    // PROBLEM_CLASS
    ACTION_BASED = 0;
    HIERARCHICAL = 26;
    SCHEDULING = 56;
    // PROBLEM_TYPE
    SIMPLE_NUMERIC_PLANNING = 30;
    GENERAL_NUMERIC_PLANNING = 31;
    // TIME
    CONTINUOUS_TIME = 1;
    DISCRETE_TIME = 2;
    INTERMEDIATE_CONDITIONS_AND_EFFECTS = 3;
    EXTERNAL_CONDITIONS_AND_EFFECTS = 39;
    TIMED_EFFECTS = 4;
    TIMED_GOALS = 5;
    DURATION_INEQUALITIES = 6;
    SELF_OVERLAPPING = 47;
    // EXPRESSION_DURATION
    STATIC_FLUENTS_IN_DURATIONS = 27;
    FLUENTS_IN_DURATIONS = 28;
    REAL_TYPE_DURATIONS = 62;
    INT_TYPE_DURATIONS = 63;
    // NUMBERS
    CONTINUOUS_NUMBERS = 7;
    DISCRETE_NUMBERS = 8;
    BOUNDED_TYPES = 38;
    // CONDITIONS_KIND
    NEGATIVE_CONDITIONS = 9;
    DISJUNCTIVE_CONDITIONS = 10;
    EQUALITIES = 11;
    EXISTENTIAL_CONDITIONS = 12;
    UNIVERSAL_CONDITIONS = 13;
    // EFFECTS_KIND
    CONDITIONAL_EFFECTS = 14;
    INCREASE_EFFECTS = 15;
    DECREASE_EFFECTS = 16;
    STATIC_FLUENTS_IN_BOOLEAN_ASSIGNMENTS = 41;
    STATIC_FLUENTS_IN_NUMERIC_ASSIGNMENTS = 42;
    STATIC_FLUENTS_IN_OBJECT_ASSIGNMENTS = 57;
    FLUENTS_IN_BOOLEAN_ASSIGNMENTS = 43;
    FLUENTS_IN_NUMERIC_ASSIGNMENTS = 44;
    FLUENTS_IN_OBJECT_ASSIGNMENTS = 58;
    FORALL_EFFECTS = 59;
    // TYPING
    FLAT_TYPING = 17;
    HIERARCHICAL_TYPING = 18;
    // FLUENTS_TYPE
    NUMERIC_FLUENTS = 19;
    OBJECT_FLUENTS = 20;
    INT_FLUENTS = 60;
    REAL_FLUENTS = 61;
    // PARAMETERS
    BOOL_FLUENT_PARAMETERS = 50;
    BOUNDED_INT_FLUENT_PARAMETERS = 51;
    BOOL_ACTION_PARAMETERS = 52;
    BOUNDED_INT_ACTION_PARAMETERS = 53;
    UNBOUNDED_INT_ACTION_PARAMETERS = 54;
    REAL_ACTION_PARAMETERS = 55;
    // QUALITY_METRICS
    ACTIONS_COST = 21;
    FINAL_VALUE = 22;
    MAKESPAN = 23;
    PLAN_LENGTH = 24;
    OVERSUBSCRIPTION = 29;
    TEMPORAL_OVERSUBSCRIPTION = 40;
    // ACTION_COST_KIND
    STATIC_FLUENTS_IN_ACTIONS_COST = 45;
    FLUENTS_IN_ACTIONS_COST = 46;
    REAL_NUMBERS_IN_ACTIONS_COST = 64;
    INT_NUMBERS_IN_ACTIONS_COST = 65;
    // OVERSUBSCRIPTION_KIND
    REAL_NUMBERS_IN_OVERSUBSCRIPTION = 66;
    INT_NUMBERS_IN_OVERSUBSCRIPTION = 67;
    // SIMULATED_ENTITIES
    SIMULATED_EFFECTS = 25;
    // CONSTRAINTS_KIND
    TRAJECTORY_CONSTRAINTS = 48;
    STATE_INVARIANTS = 49;
    // HIERARCHICAL
    METHOD_PRECONDITIONS = 32;
    TASK_NETWORK_CONSTRAINTS = 33;
    INITIAL_TASK_NETWORK_VARIABLES = 34;
    TASK_ORDER_TOTAL = 35;
    TASK_ORDER_PARTIAL = 36;
    TASK_ORDER_TEMPORAL = 37;
    // INITIAL_STATE
    UNDEFINED_INITIAL_NUMERIC = 68;
    UNDEFINED_INITIAL_SYMBOLIC = 69;
}

// =================== Plan ================





// Representation of an action instance that appears in a plan.
message ActionInstance {
    // Optional. A unique identifier of the action that might be used to refer to it (e.g. in HTN plans).
    string id = 1;
    // name of the action
    string action_name = 2;
    // Parameters of the action instance, required to be constants.
    repeated Atom parameters = 3;
    // Start time of the action. The default 0 value is OK in the case of non-temporal planning
    // feature: [DURATIVE_ACTIONS]
    Real start_time = 4;
    // End time of the action. The default 0 value is OK in the case of non-temporal planning
    // feature: [DURATIVE_ACTIONS]
    Real end_time = 5;
}

message MethodInstance {
    //  A unique identifier of the method that is used to refer to it in the hierarchy.
    string id = 1;
    // name of the method
    string method_name = 2;
    // Parameters of the method instance, required to be constants.
    repeated Atom parameters = 3;

    // A mapping of the IDs of the method's subtasks into the IDs of the action/methods that refine them.
    map<string, string> subtasks = 6;

}

message PlanHierarchy {
    // A mapping of the root task IDs into the IDs of the actions and methods that refine them.
    map<string, string> root_tasks = 1;

    // Instances of all methods used in the plan.
    repeated MethodInstance methods = 2;
}

message Plan {
    // An ordered sequence of actions that appear in the plan.
    // The order of the actions in the list must be compatible with the partial order of the start times.
    // In case of non-temporal planning, this allows having all start time at 0 and only rely on the order in this sequence.
    // features: ACTION_BASED
    repeated ActionInstance actions = 1;

    // When the plan is hierarchical, this object provides the decomposition of hte root tasks into the actions of the plan
    // feature: HIERARCHY
    PlanHierarchy hierarchy = 2;

    // Solution representation of a scheduling problem.
    // feature: SCHEDULING
    Schedule schedule = 3;
}






// =============== RPC API =======================

message PlanRequest {
    // Problem that should be solved.
    Problem problem = 1;

    enum Mode {
        SATISFIABLE = 0;
        SOLVED_OPTIMALLY = 1;
    }
    Mode resolution_mode = 2;

    // Max allowed runtime time in seconds.
    double timeout = 3;

    // Engine specific options to be passed to the engine
    map<string, string> engine_options = 4;

    // Plan that can be used to warm start the search.
    Plan warm_start_plan = 5;
}

message ValidationRequest {
    // Problem to be validated.
    Problem problem = 1;

    // Plan to validate.
    Plan plan = 2;
}


// A freely formatted logging message.
// Each message is annotated with its criticality level from the minimal (DEBUG) to the maximal (ERROR).
// Criticality level is expected to be used by an end user to decide the level of verbosity.
message LogMessage {
    enum LogLevel {
        DEBUG = 0;
        INFO = 1;
        WARNING = 2;
        ERROR = 3;
    }
    LogLevel level = 1;
    string message = 2;
}


// Message sent by engine.
// Contains the engine exit status as well as the best plan found if any.
message PlanGenerationResult {
    enum Status {
        // ==== Engine stopped normally ======

        // Valid plan found
        // The `plan` field must be set.
        SOLVED_SATISFICING = 0;
        // Plan found with optimality guarantee
        // The `plan` field must be set and contains an optimal solution.
        SOLVED_OPTIMALLY = 1;
        // No plan exists
        UNSOLVABLE_PROVEN = 2;
        // The engine was not able to find a solution but does not give any guarantee that none exist
        // (i.e. the engine might not be complete)
        UNSOLVABLE_INCOMPLETELY = 3;

        // ====== Engine exited before making any conclusion ====
        // Search stopped before concluding SOLVED_OPTIMALLY or UNSOLVABLE_PROVEN
        // If a plan was found, it might be reported in the `plan` field

        // The engine ran out of time
        TIMEOUT = 13;
        // The engine ran out of memory
        MEMOUT = 14;
        // The engine faced an internal error.
        INTERNAL_ERROR = 15;
        // The problem submitted is not supported by the engine.
        UNSUPPORTED_PROBLEM = 16;

        // ====== Intermediate answer ======
        // This Answer is an Intermediate Answer and not a Final one
        INTERMEDIATE = 17;
    }
    Status status = 1;

    // Optional. Best plan found if any.
    Plan plan = 2;

    // A set of engine specific values that can be reported, for instance
    // - "grounding-time": "10ms"
    // - "expanded-states": "1290"
    map<string, string> metrics = 3;

    // Optional log messages about the engine's activity.
    // Note that it should not be expected that logging messages are visible to the end user.
    // If used in conjunction with INTERNAL_ERROR or UNSUPPORTED_PROBLEM, it would be expected to have at least one log message at the ERROR level.
    repeated LogMessage log_messages = 4;

    // Synthetic description of the engine that generated this message.
    Engine engine = 5;
}

message Engine {
    // Short name of the engine (planner, validator, ...)
    string name = 1;
}


// Message sent by the validator.
message ValidationResult {
    enum ValidationResultStatus {
        // The Plan is valid for the Problem.
        VALID = 0;
        // The Plan is not valid for the Problem.
        INVALID = 1;
        // The engine can't determine if the plan is VALID or INVALID for the Problem.
        UNKNOWN = 2;
    }
    ValidationResultStatus status = 1;

    // A set of engine specific values that can be reported
    map<string, string> metrics = 4;

    // Optional. Information given by the engine to the user.
    repeated LogMessage log_messages = 2;

    // Synthetic description of the engine that generated this message.
    Engine engine = 3;
}



// Message sent by the grounder.
message CompilerResult {
    // The problem generated by the Compiler
    Problem problem = 1;
    // The map_back_plan field is a map from the ActionInstance of the
    // compiled problem to the original ActionInstance.
    map<string, ActionInstance> map_back_plan = 2;

    // A set of engine specific values that can be reported
    map<string, string> metrics = 5;

    // Optional. Information given by the engine to the user.
    repeated LogMessage log_messages = 3;

    // Synthetic description of the engine that generated this message.
    Engine engine = 4;
}

service UnifiedPlanning {
    // An anytime plan request to the engine.
    // The engine replies with a stream of N `Answer` messages where:
    //  - the first (N-1) message are of type `IntermediateReport`
    //  - the last message is of type `FinalReport`
    rpc planAnytime(PlanRequest) returns(stream PlanGenerationResult);

    // A oneshot plan request to the engine.
    // The engine replies with athe PlanGenerationResult
    rpc planOneShot(PlanRequest) returns(PlanGenerationResult);

    // A validation request to the engine.
    // The engine replies with the ValidationResult
    rpc validatePlan(ValidationRequest) returns(ValidationResult);

    // A compiler request to the engine.
    // The engine replies with the CompilerResult
    rpc compile(Problem) returns(CompilerResult);


    // ===== About bidirectional interaction =====

    // The scheme above does not allow send info to the engine after the initial request.
    // gRPC might allow some limited form of interactions such as setting deadlines,
    // cancel request or terminate an RPC. (https://www.grpc.io/docs/what-is-grpc/core-concepts/)

    // With the current UP feature set, the above plan API is likely to be sufficient.
    // In the future we might want to extend the API to have a stream of message sen to the engine.
    // rpc plan(stream Request) returns(stream Answer);
}
