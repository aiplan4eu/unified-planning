name: test

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
    secrets:
      CODECOV_TOKEN:

env:
  up_tamer_commit: "6e6f7641465d9db22060bbeab80092a948662a32"
  up_pyperplan_commit: "a24854213caf5038e1540e31613d24b93825fbb3"
  up_fast_downward_commit: "59f9d5fc9ebc84f7c96963ce459f821e64114447"
  up_enhsp_commit: "304e0a7c5791c4ad640e725dd6b42747952d1f53"
  up_fmap_commit: "f29e66c8483abcb8f17ff1c46a0745ee9b1e95fa"

jobs:
  basic-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{inputs.python-version}}

      - name: Install Python dependencies
        run: python3 -m pip install -r requirements.txt

      - name: Install Development Python dependencies
        run: python3 -m pip install -r dev-requirements.txt

      - name: Install graphviz
        run: sudo apt-get install graphviz graphviz-dev

      - name: Install plot Python dependencies
        run: python3 -m pip install -r plot-requirements.txt

      - name: Install tarski
        run: |
          python3 -m pip install tarski[arithmetic]
          sudo apt install -y gringo

      - name: Black check
        run: |
          python3 -m pip install black==22.6.0
          python3 -m black --check --exclude=unified_planning/grpc/generated/ .

      - name: MyPy check
        run: python3 -m mypy unified_planning

      - name: Test all packages imports
        run: python3 scripts/test_imports.py

  check-documentation:
    runs-on: ubuntu-latest
    needs: [
        basic-check,
        check-protobuf,
      ]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{inputs.python-version}}

      - name: Install pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc

      - name: Install python requirements
        run: |
          pip install --upgrade pip
          pip install .
          pip install -r docs/requirements.txt

      - name: Listing dependency versions
        run: pip freeze

      - name: Building docs
        run: make html
        working-directory: ./docs

  run-tests-ubuntu-22-04:
    runs-on: ubuntu-22.04
    needs: [
        basic-check,
        check-protobuf,
      ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{inputs.python-version}}

      - name: Install pyparsing version used in ROS1
        run: python3 -m pip install pyparsing==2.4.6

      - name: Install Python dependencies
        run: python3 -m pip install -r requirements.txt

      - name: Install Development Python dependencies
        run: python3 -m pip install -r dev-requirements.txt

      - name: Checkout up-tamer
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-tamer
          path: up-tamer
          ref: ${{env.up_tamer_commit}}

      - name: Install up-tamer
        run: python3 -m pip install up-tamer/

      - name: Checkout up-pyperplan
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-pyperplan
          path: up-pyperplan
          ref: ${{env.up_pyperplan_commit}}

      - name: Install up-pyperplan
        run: python3 -m pip install up-pyperplan/

      - name: Setup java for ENHSP
        uses: actions/setup-java@v2
        with:
          distribution: "microsoft"
          java-version: "17"

      - name: Download and install ENHSP
        run: |
          git clone https://gitlab.com/enricos83/ENHSP-Public.git
          cd ENHSP-Public; git checkout enhsp20-0.15.0; ./compile; cd ..
          mkdir .planners; mv ENHSP-Public/enhsp-dist .planners/enhsp-20; rm -rf ENHSP-Public

      - name: Run tests
        run: bash run_tests.sh

  run-tests-ubuntu:
    runs-on: ubuntu-latest
    needs: [
        basic-check,
        check-protobuf,
      ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{inputs.python-version}}

      - name: Install Python dependencies
        run: python3 -m pip install -r requirements.txt

      - name: Install Development Python dependencies
        run: python3 -m pip install -r dev-requirements.txt

      - name: Install graphviz
        run: sudo apt-get install graphviz graphviz-dev

      - name: Install plot Python dependencies
        run: python3 -m pip install -r plot-requirements.txt

      - name: Install tarski
        run: |
          python3 -m pip install tarski[arithmetic]
          sudo apt install -y gringo

      - name: Checkout up-tamer
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-tamer
          path: up-tamer
          ref: ${{env.up_tamer_commit}}

      - name: Install up-tamer
        run: python3 -m pip install up-tamer/

      - name: Checkout up-pyperplan
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-pyperplan
          path: up-pyperplan
          ref: ${{env.up_pyperplan_commit}}

      - name: Install up-pyperplan
        run: python3 -m pip install up-pyperplan/

      - name: Setup java for ENHSP
        uses: actions/setup-java@v2
        with:
          distribution: "microsoft"
          java-version: "17"

      - name: Download and install ENHSP
        run: |
          git clone https://gitlab.com/enricos83/ENHSP-Public.git
          cd ENHSP-Public; git checkout enhsp20-0.15.0; ./compile; cd ..
          mkdir .planners; mv ENHSP-Public/enhsp-dist .planners/enhsp-20; rm -rf ENHSP-Public

      - name: Test code-snippets
        run: bash scripts/test_code_snippets.sh

      - name: Run tests
        run: bash run_tests.sh

      - name: "Upload coverage to Codecov"
        if: ${{ github.repository == 'aiplan4eu/unified-planning' && inputs.python-version == '3.10' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true

  run-tests-windows:
    runs-on: windows-latest
    needs: [
        basic-check,
        check-protobuf,
      ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{inputs.python-version}}

      - name: Install Python dependencies
        run: python3 -m pip install -r requirements.txt

      - name: Install Development Python dependencies
        run: python3 -m pip install -r dev-requirements.txt

      - name: Checkout up-tamer
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-tamer
          path: up-tamer
          ref: ${{env.up_tamer_commit}}

      - name: Install up-tamer
        run: python3 -m pip install up-tamer/

      - name: Checkout up-pyperplan
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-pyperplan
          path: up-pyperplan
          ref: ${{env.up_pyperplan_commit}}

      - name: Install up-pyperplan
        run: python3 -m pip install up-pyperplan/

      - name: Setup java for ENHSP
        uses: actions/setup-java@v2
        with:
          distribution: "microsoft"
          java-version: "17"

      - name: Download and install ENHSP
        run: |
          git clone https://gitlab.com/enricos83/ENHSP-Public.git
          cd ENHSP-Public; git checkout enhsp20-0.15.0; bash ./compile; cd ..
          bash -c "mkdir .planners; mv ENHSP-Public/enhsp-dist .planners/enhsp-20; rm -rf ENHSP-Public"

      - name: Run tests
        run: bash run_tests.sh

  run-tests-macos:
    runs-on: macos-13
    needs: [
        basic-check,
        check-protobuf,
      ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{inputs.python-version}}

      - name: Install Python dependencies
        run: python3 -m pip install -r requirements.txt

      - name: Install Development Python dependencies
        run: python3 -m pip install -r dev-requirements.txt

      - name: Install tarski
        run: |
          python3 -m pip install tarski[arithmetic]
      #          brew install gringo -- Commented because not working on github actions
      - name: Checkout up-tamer
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-tamer
          path: up-tamer
          ref: ${{env.up_tamer_commit}}

      - name: Install up-tamer
        run: python3 -m pip install up-tamer/

      - name: Checkout up-pyperplan
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-pyperplan
          path: up-pyperplan
          ref: ${{env.up_pyperplan_commit}}

      - name: Install up-pyperplan
        run: python3 -m pip install up-pyperplan/

      - name: Setup java for ENHSP
        uses: actions/setup-java@v2
        with:
          distribution: "microsoft"
          java-version: "17"

      - name: Download and install ENHSP
        run: |
          git clone https://gitlab.com/enricos83/ENHSP-Public.git
          cd ENHSP-Public; git checkout enhsp20-0.15.0; bash ./compile; cd ..
          bash -c "mkdir .planners; mv ENHSP-Public/enhsp-dist .planners/enhsp-20; rm -rf ENHSP-Public"

      - name: Run tests
        run: bash run_tests.sh

  check-protobuf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{inputs.python-version}}

      - name: Install Protobuf compiler
        run: |
          python3 -m pip install grpcio-tools==1.66.2

      - name: Check Protobuf generation
        run: bash scripts/generate_protobuf_bindings.sh

      - name: Check Protobuf bindings
        run: |
          echo "Checking that the committed protobuf bindings are exactly the one generated from the declaration"
          git diff --exit-code

  run-colab-notebooks:
    runs-on: ubuntu-latest
    needs: [
        basic-check,
        check-protobuf,
      ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{inputs.python-version}}

      - name: Install Python dependencies
        run: python3 -m pip install -r requirements.txt

      - name: Install Development Python dependencies
        run: python3 -m pip install -r dev-requirements.txt

      - name: Install graphviz
        run: sudo apt-get install graphviz graphviz-dev

      - name: Install plot Python dependencies
        run: python3 -m pip install -r plot-requirements.txt

      - name: Checkout up-tamer
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-tamer
          path: up-tamer
          ref: ${{env.up_tamer_commit}}

      - name: Install up-tamer
        run: python3 -m pip install up-tamer/

      - name: Checkout up-pyperplan
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-pyperplan
          path: up-pyperplan
          ref: ${{env.up_pyperplan_commit}}

      - name: Install up-pyperplan
        run: python3 -m pip install up-pyperplan/

      - name: Checkout up-fast-downward
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-fast-downward
          path: up-fast-downward
          ref: ${{env.up_fast_downward_commit}}

      - name: Install up-fast-downward
        run: python3 -m pip install up-fast-downward/

      - name: Setup java for ENHSP
        uses: actions/setup-java@v2
        with:
          distribution: "microsoft"
          java-version: "17"

      - name: Checkout up-enhsp
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-enhsp
          path: up-enhsp
          ref: ${{env.up_enhsp_commit}}

      - name: Install up-enhsp
        run: python3 -m pip install up-enhsp/

      - name: Install up-aries
        run: pip3 install up-aries

      - name: Checkout up-fmap
        uses: actions/checkout@v2
        with:
          repository: aiplan4eu/up-fmap
          path: up-fmap
          ref: ${{env.up_fmap_commit}}

      - name: Install up-fmap
        run: python3 -m pip install up-fmap/

      - name: Install jupyter and ipython3
        run:  |
          sudo apt-get update
          sudo apt install jupyter
          python3 -m pip install ipython

      - name: Run colabs
        run: bash scripts/test_colab.sh
